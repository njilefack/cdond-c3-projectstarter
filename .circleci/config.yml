version: 2.1

orbs:
  slack: circleci/slack@4.2.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID} --recursive
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID} --force  
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID}"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            if(( $SUCCESS==1 )); 
            then
             cd ~/project/backend
             npm install
             npm run migrations:revert
             exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm run build
            cd dist
            ls
      - save_cache:
          paths: 
            - frontend/node_modules
            - frontend/dist
          key: frontend-build-${CIRCLE_WORKFLOW_ID}

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm run build
             cd dist
             ls
      - save_cache:
          paths: 
            - backend/node_modules
            - backend/dist
          key: backend-build-${CIRCLE_WORKFLOW_ID}

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
         key: frontend-build
      - run:
          name: Front-end-Test
          command: |
            cd frontend
            npm install
            npm install oauth
            yarn run test -w 1
                     
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
         key: backend-build
      - run:
         name: Back-end-Test
         command: |
           cd backend
           npm install
           npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: frontend-build
      - run:
          name: frontend-audit
          command: |
             cd frontend
             npm update
             npm audit fix

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: backend-build
      - run:
          name: backend-audit
          command: |
             cd frontend
             npm update
             npm audit fix

# Infrastructure Setup for FrontEnd and BackEnd
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
        command: 
    steps:
      - checkout
      - run: yum install -y tar gzip curl
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=BackEnd-Server-${CIRCLE_WORKFLOW_ID} \
              --stack-name backend-stack-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}  

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=FrontEnd-${CIRCLE_WORKFLOW_ID} \
              --stack-name frontend-stack-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}  

# This will get and then add the backend server IPs to ansible inventory file
      - run:
          name: Add back-end public dns to ansible inventory
          command: |
            PUBLIC_DNS=$(aws ec2 describe-instances \
            --filters 'Name=tag:project,Values=BackEnd-Server-*' \
            --query 'Reservations[*].Instances[*].PublicDnsName' \
            --output text >> .circleci/ansible/inventory.txt)
      - run: 
         cat .circleci/ansible/inventory.txt

# Get and save public ip address of backend server to https://memstash.io
      - run:
          name: Get and save PublicDnsName of EC2 instance to https://memstash.io/
          command: |
            PUBLIC_DNS=$(aws ec2 describe-instances --filters 'Name=tag:project,Values=BackEnd-Server-*' --query "Reservations[*].Instances[0].PublicDnsName" --output text)
            echo ${PUBLIC_DNS}
            curl -H "Content-Type: text/plain" \
               -H "token: ${CIRCLE_WORKFLOW_ID}" \
               --request PUT \
               --data ${PUBLIC_DNS} \
               https://api.memstash.io/values/public_dns

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
# Here's where you will add some code to rollback on failure

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["d8:6b:09:ec:73:91:88:72:ef:18:3e:44:bd:50:73:de"]

      # attach workspace          
      - attach_workspace:
          at: ~/
      - run: cat .circleci/ansible/inventory.txt
      - run:
          name: Install dependencies
          command: |
            apk add tar gzip curl
            apk add ansible
            pip install awscli
      - run:
          name: Configure server
          command: |
            touch ~/project/backend/.env
            echo ENVIRONMENT=production >> "backend/.env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/.env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> "backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cat backend/.env
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      # - run:
      #     name: Install dependencies
      #     command: |
      #       apk add --update tar gzip ansible nodejs npm curl
      #       apk add --no-cache --upgrade bash
      #       apk add --no-cache --update ansible
      #       apk add --no-cache openssh-client
      #       pip3 install awscli
    
      # - run:
      #     name: Get the public DNS of EC2 instance from https://memstash.io/ & Configure server
      #     command: |
      #       PUBLIC_DNS=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/public_dns)
      #       echo ${PUBLIC_DNS}
      #       cd .circleci/ansible/
      #       ls
      #       echo ${PUBLIC_DNS} >> ./inventory.txt
      #       cat ./inventory.txt    
      #       export ANSIBLE_HOST_KEY_CHECKING=False
      #       ansible-playbook -i ./inventory.txt configure-server.yml

#Here's where you will add some code to rollback on failure -destroy-environment

#This will perform Database Migrations
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: backend-build-${CIRCLE_WORKFLOW_ID}
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run build
            npm run migrations:revert
            npm run migrations > migrations.txt
          no_output_timeout: 15m
      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}"  --request PUT \
              --data $( grep -c "No migrations are pending" migrations.txt ) \
              https://api.memstash.io/values/migration_completion
            cat migrations.txt

# Here's where you will add some code to rollback on failure  

# frontend deployment
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
              yum -y install tar gzip
              curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
              yum -y install nodejs
            # apk add --no-cache curl
            # apk add --no-cache --upgrade bash
            # apk add --no-cache --update npm
            # pip3 install awscli

# Get the backend URL
      - run:
          name: Get backend url
          command: |
            PUBLIC_DNS=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/public_dns)
            echo ${PUBLIC_DNS} 
            export API_URL="http://${PUBLIC_DNS}:3030"
            echo "API_URL=$API_URL" >> frontend/.env
            echo "${API_URL}"

      - run:
          name: Deploy frontend objects to s3 bucket
          command: |
            cd frontend
            npm install
            npm run build
            ls
            aws s3 cp ./dist s3://udapeople-${CIRCLE_WORKFLOW_ID}/ --recursive
      # Here's where you will add some code to rollback on failure    
      # - destroy-environment
      # - revert-migrations

# backend deployment & run-migrations
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11

    steps:
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["d8:6b:09:ec:73:91:88:72:ef:18:3e:44:bd:50:73:de"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          no_output_timeout: 15m
          command: |
            apk add --update ansible
            apk add --update tar gzip curl
            apk add --update openssh-client
            apk add --update python3 py3-pip
            pip3 install --upgrade pip
            pip3 install awscli
###############################################################################################
# just added
      - run:
          name: install openssh
          command: |
            apk add openssh-client

# just added envs
      - run:
          name: create .env files
          command: |
            echo ENVIROMENT=development > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
############################################################################################
      - run:
          name: Compress backend folder
          command: |
            tar -C backend -czvf artifact.tar.gz .
            ls -la

# Get the backtend public dns from https://memstash.io and deploy backend
      - run:
          name: Get EC2 instance public dns & deploy backend
          no_output_timeout: 15m
          command: |
            PUBLIC_DNS=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/public_dns)
            echo ${PUBLIC_DNS} 
            cd .circleci/ansible/
            echo ${PUBLIC_DNS} >> ./inventory.txt
            cat ./inventory.txt
      - run:
          name: Configure backend server using ansible and then deploy backend
          command: |
            cd .circleci/ansible/
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i ./inventory.txt deploy-backend.yml
            
#Here's where you will add some code to rollback on failure

  frontend smoke-test:
    docker:
       - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
              apk add --update tar gzip curl python3 py3-pip
              apk add --no-cache openssh-client
              pip3 install --upgrade pip
              pip3 install awscli
      - run:
          name: Frontend smoke test
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-west-2.amazonaws.com"
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
  backend smoke-test:
    docker:
      # Lightweight Docker image 
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip curl python3 py3-pip
            pip3 install --upgrade pip
            pip3 install awscli
      - run:
          name: Backend smoke test.
          command: |
            PUBLIC_DNS=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/public_dns)
            echo ${PUBLIC_DNS}
            if curl -s "http://${PUBLIC_DNS}:3030/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi
      # - revert-migrations      
      # - destroy-environment

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
         name: Install dependencies
         command: |
           yum -y install gzip

      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports \
            --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            
            export STACKS=$(aws cloudformation list-stacks \
            --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE \
            --no-paginate --output text)
            echo OldWorkflowID: "$OldWorkflowID"
            echo STACKS: "$STACKS" 
            aws cloudformation deploy \
            --template-file /root/project/.circleci/files/cloudfront.yml \
            --tags project=udapeople \
            --stack-name udapeople-cloudfront \
            --parameter-overrides newWorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" 
            curl -H "Content-Type: text/plain" -H "token: OldWorkflowID-${CIRCLE_WORKFLOW_ID}" \
            --request PUT \
            --data "$OldWorkflowID" https://api.memstash.io/values/OldWorkflowID
      # Here's where you will add some code to rollback on failure
      - revert-migrations      
      - destroy-environment
              

            # echo Delete old stacks/resources
            # if [[ "${STACKS[@]}" =~ "${OldWorkflowId}" ]]
            # then
            #   # Delete files from bucket
            #   aws s3 rm s3://udapeople-${OldWorkflowId}/ --recursive
            #   # Delete front end stack
            #   aws cloudformation delete-stack --stack-name udacity-frontend-${OldWorkflowId}
            #   # Delete back end stack
            #   aws cloudformation delete-stack --stack-name udacity-backend-${OldWorkflowId}
            # fi

        #  - slack/status
      # Here's where you will add some code to rollback on failure 

  cleanup:
    docker:
      # Docker image here
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y gzip tar
      - run:
          name: Get old stack workflow id and remove old stacks and files
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Old Workflow Id: "${OldWorkflowID}"
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "frontend-${OldWorkflowID}"
            fi 


workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      - deploy-infrastructure
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
         # filters:
         #   branches:
         #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - frontend smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - backend smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [frontend smoke-test, backend smoke-test]
      - cleanup:
          requires: [cloudfront-update]