version: 2.1

orbs:
  jira: circleci/jira@1.3.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm run build
            cd dist
            ls
      - save_cache:
          paths: 
            - frontend/node_modules
            - frontend/dist
          key: frontend-build-${CIRCLE_WORKFLOW_ID}

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
             cd dist
             ls
      - save_cache:
          paths: 
            - backend/node_modules
            - backend/dist
          key: backend-build-${CIRCLE_WORKFLOW_ID}

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
         key: frontend-build
      - run:
          name: Front-end-Test
          command: |
            cd frontend
            npm install
            npm install oauth
            yarn run test -w 1
                     
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
         key: backend-build
      - run:
         name: Back-end-Test
         command: |
           cd backend
           npm install
           npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: frontend-build
      - run:
          name: frontend-audit
          command: |
             cd frontend
             npm update
             npm audit fix

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: backend-build
      - run:
          name: frontend-audit
          command: |
             cd frontend
             npm update
             npm audit fix

# Infrastructure Setup for FrontEnd and BackEnd
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=BackEnd-Server-${CIRCLE_WORKFLOW_ID} \
              --stack-name backend-stack-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}  

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=FrontEnd-${CIRCLE_WORKFLOW_ID} \
              --stack-name frontend-stack-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}  

# This will get and then add the backend server IPs to ansible inventory file
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            INSTANCE_IP=$(aws ec2 describe-instances \
            --filters 'Name=tag:project,Values=BackEnd-Server-*' \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> .circleci/ansible/inventory.txt)
      - run: 
         cat .circleci/ansible/inventory.txt

# Get and save public ip address of backend server to https://memstash.io
      - run:
          name: Get and save publicIpAddress of EC2 instance to https://memstash.io/
          command: |
            INSTANCE_IP=$(aws ec2 describe-instances --filters 'Name=tag:project,Values=BackEnd-Server-*' --query "Reservations[*].Instances[0].PublicIpAddress" --output text)
            echo ${INSTANCE_IP}
            curl -H "Content-Type: text/plain" \
               -H "token: ${CIRCLE_WORKFLOW_ID}" \
               --request PUT \
               --data ${INSTANCE_IP} \
               https://api.memstash.io/values/instance_ip

      # - persist_to_workspace:
      #     root: ~/
      #     paths:
      #       - cdond-c3-projectstarter/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["d8:6b:09:ec:73:91:88:72:ef:18:3e:44:bd:50:73:de"]
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            apk add --no-cache --upgrade bash
            apk add --no-cache --update ansible
            apk add --no-cache openssh-client
            pip3 install awscli

      - run:
          name: Configure server
          command: |
            INSTANCE_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/instance_ip)
            echo ${INSTANCE_IP}
            cd .circleci/ansible/
            ls
            echo ${INSTANCE_IP} >> ./inventory.txt
            cat ./inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i ./inventory.txt configure-server.yml
#Here's where you will add some code to rollback on failure -destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: backend-build-${CIRCLE_WORKFLOW_ID}
      - run:
          name: Run migrations
          command: |
            echo printenv
            printenv >> ./backend/.env
            cd backend
            npm install
            npm run migrations > migrationOutput.txt
            cat migrationOutput.txt
          no_output_timeout: 15m
      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            echo grep -c "No migrations are pending" migrationOutput.txt
            MIGRATION_RESULT=`grep -c "No migrations are pending" migrationOutput.txt`
            echo $MIGRATION_RESULT
            curl -H "Content-Type: text/plain" \
               -H "token: ${CIRCLE_WORKFLOW_ID}" \
               --request PUT \
               --data ${MIGRATION_RESULT} \
               https://api.memstash.io/values/migration_result

            TEST_RESPONSE=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/migration_result)
            echo "test memstash result"
            echo ${TEST_RESPONSE}


     # Here's where you will add some code to rollback on failure  

# frontend deployment
  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache curl
            apk add --no-cache --upgrade bash
            apk add --no-cache --update npm
            pip3 install awscli

# Get the backend URL
      - run:
          name: Get backend url
          command: |
            INSTANCE_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/instance_ip)
            echo $INSTANCE_IP 
            echo "https://$INSTANCE_IP:3030"
            export API_URL="http://${INSTANCE_IP}:3030"
            echo "${API_URL}"
            cd frontend
            npm install
            npm run build
      - run:
          name: Deploy frontend objects to s3 bucket
          command: |
            aws s3 cp ./frontend/dist s3://udapeople-${CIRCLE_WORKFLOW_ID}/ --recursive
      # - destroy-environment
      # - revert-migrations

# # backend deployment
#   deploy-backend:
#     docker:
#       - image: python:3.7-alpine3.11
#     steps:
#       - checkout
#       # Add ssh keys with fingerprint
#       - add_ssh_keys:
#           fingerprints: ["d8:6b:09:ec:73:91:88:72:ef:18:3e:44:bd:50:73:de"]
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             apk add --no-cache curl
#             apk add --no-cache --upgrade bash
#             apk add --no-cache --update ansible
#             apk add --no-cache openssh-client
#             pip3 install awscli

# # Get the backtend URL
#       - run:
#           name: Deploy backend
#           no_output_timeout: 15m
#           command: |
#             INSTANCE_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/instance_ip)
#             echo ${INSTANCE_IP}
#             cd .circleci/ansible/
#             echo ${INSTANCE_IP} >> ./inventory.txt
#             cat ./inventory.txt
#             # cd /root/project/
#             ls
#             pwd
#             export ANSIBLE_HOST_KEY_CHECKING=False
#             ansible-playbook -i ./inventory.txt deploy-backend.yml
            
      # Here's where you will add some code to rollback on failure 




workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
         # filters:
         #   branches:
         #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]