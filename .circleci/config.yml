version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm run build
            cd dist
            ls
      - save_cache:
          paths: 
            - frontend/node_modules
            - frontend/dist
          key: frontend-build-${CIRCLE_WORKFLOW_ID}

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
             cd dist
             ls
      - save_cache:
          paths: 
            - backend/node_modules
            - backend/dist
          key: backend-build-${CIRCLE_WORKFLOW_ID}

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
         key: frontend-build
      - run:
          name: Front-end-Test
          command: |
            cd frontend
            npm install
            npm install oauth
            yarn run test -w 1
                     
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
         key: backend-build
      - run:
         name: Back-end-Test
         command: |
           cd backend
           npm install
           npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: frontend-build
      - run:
          name: frontend-audit
          command: |
             cd frontend
             npm update
             npm audit fix

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: backend-build
      - run:
          name: frontend-audit
          command: |
             cd frontend
             npm update
             npm audit fix

# Infrastructure Setup for FrontEnd and BackEnd
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=BackEnd-Server-${CIRCLE_WORKFLOW_ID} \
              --stack-name backend-stack-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}  

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=FrontEnd-Server-${CIRCLE_WORKFLOW_ID} \
              --stack-name frontend-stack-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}  

# This will add back-end servers IPs to ansible inventory file
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            INSTANCE_IP=$(aws ec2 describe-instances \
            --filters 'Name=tag,Values=backend-*' \
            --quey "Reservations[*].Instances[*].PublicIpAddress" \
            --output txt >> .circleci/ansible/inventory.txt)

            echo ${INSTANCE_IP}
            curl -H "Content-Type: text/plain" \
               -H "token: ${CIRCLE_WORKFLOW_ID}" \
               --request PUT \
               --data ${INSTANCE_IP} \
               https://api.memstash.io/values/instance_ip

      - run: sudo cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - cdond-c3-projectstarter/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure   


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
         # filters:
         #   branches:
         #     only: [test-feature-branch]